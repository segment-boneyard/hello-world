// Code generated by protoc-gen-go. DO NOT EDIT.
// source: domain.proto

/*
Package domain is a generated protocol buffer package.

It is generated from these files:
	domain.proto

It has these top-level messages:
	TrackRequest
	IdentifyRequest
	GroupRequest
	SetRequest
	GetContextRequest
	GetContextResponse
	GetContextIntoFileRequest
	GetContextIntoFileResponse
	StoreContextRequest
	StoreContextFromFileRequest
	ReportErrorRequest
	ReportWarningRequest
	StatsRequest
	LogRequest
	StatusResponse
	Empty
*/
package domain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Track
type TrackRequest struct {
	Context      []byte `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Integrations []byte `protobuf:"bytes,2,opt,name=integrations,proto3" json:"integrations,omitempty"`
	Properties   []byte `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	AnonymousId  string `protobuf:"bytes,4,opt,name=anonymousId" json:"anonymousId,omitempty"`
	UserId       string `protobuf:"bytes,5,opt,name=userId" json:"userId,omitempty"`
	Event        string `protobuf:"bytes,6,opt,name=event" json:"event,omitempty"`
	MessageId    string `protobuf:"bytes,7,opt,name=messageId" json:"messageId,omitempty"`
	Timestamp    string `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TrackRequest) Reset()                    { *m = TrackRequest{} }
func (m *TrackRequest) String() string            { return proto.CompactTextString(m) }
func (*TrackRequest) ProtoMessage()               {}
func (*TrackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TrackRequest) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *TrackRequest) GetIntegrations() []byte {
	if m != nil {
		return m.Integrations
	}
	return nil
}

func (m *TrackRequest) GetProperties() []byte {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *TrackRequest) GetAnonymousId() string {
	if m != nil {
		return m.AnonymousId
	}
	return ""
}

func (m *TrackRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TrackRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *TrackRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *TrackRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// Identify
type IdentifyRequest struct {
	Context      []byte `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Integrations []byte `protobuf:"bytes,2,opt,name=integrations,proto3" json:"integrations,omitempty"`
	Traits       []byte `protobuf:"bytes,3,opt,name=traits,proto3" json:"traits,omitempty"`
	AnonymousId  string `protobuf:"bytes,4,opt,name=anonymousId" json:"anonymousId,omitempty"`
	UserId       string `protobuf:"bytes,5,opt,name=userId" json:"userId,omitempty"`
	MessageId    string `protobuf:"bytes,6,opt,name=messageId" json:"messageId,omitempty"`
	Timestamp    string `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *IdentifyRequest) Reset()                    { *m = IdentifyRequest{} }
func (m *IdentifyRequest) String() string            { return proto.CompactTextString(m) }
func (*IdentifyRequest) ProtoMessage()               {}
func (*IdentifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IdentifyRequest) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *IdentifyRequest) GetIntegrations() []byte {
	if m != nil {
		return m.Integrations
	}
	return nil
}

func (m *IdentifyRequest) GetTraits() []byte {
	if m != nil {
		return m.Traits
	}
	return nil
}

func (m *IdentifyRequest) GetAnonymousId() string {
	if m != nil {
		return m.AnonymousId
	}
	return ""
}

func (m *IdentifyRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *IdentifyRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *IdentifyRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// Group
type GroupRequest struct {
	Context      []byte `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Integrations []byte `protobuf:"bytes,2,opt,name=integrations,proto3" json:"integrations,omitempty"`
	Traits       []byte `protobuf:"bytes,3,opt,name=traits,proto3" json:"traits,omitempty"`
	AnonymousId  string `protobuf:"bytes,4,opt,name=anonymousId" json:"anonymousId,omitempty"`
	UserId       string `protobuf:"bytes,5,opt,name=userId" json:"userId,omitempty"`
	GroupId      string `protobuf:"bytes,6,opt,name=groupId" json:"groupId,omitempty"`
	MessageId    string `protobuf:"bytes,7,opt,name=messageId" json:"messageId,omitempty"`
	Timestamp    string `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GroupRequest) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *GroupRequest) GetIntegrations() []byte {
	if m != nil {
		return m.Integrations
	}
	return nil
}

func (m *GroupRequest) GetTraits() []byte {
	if m != nil {
		return m.Traits
	}
	return nil
}

func (m *GroupRequest) GetAnonymousId() string {
	if m != nil {
		return m.AnonymousId
	}
	return ""
}

func (m *GroupRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GroupRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *GroupRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *GroupRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// Set
type SetRequest struct {
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Properties []byte `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *SetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetRequest) GetProperties() []byte {
	if m != nil {
		return m.Properties
	}
	return nil
}

// GetContext
type GetContextRequest struct {
	AllowFailed bool `protobuf:"varint,1,opt,name=allowFailed" json:"allowFailed,omitempty"`
}

func (m *GetContextRequest) Reset()                    { *m = GetContextRequest{} }
func (m *GetContextRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContextRequest) ProtoMessage()               {}
func (*GetContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetContextRequest) GetAllowFailed() bool {
	if m != nil {
		return m.AllowFailed
	}
	return false
}

type GetContextResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetContextResponse) Reset()                    { *m = GetContextResponse{} }
func (m *GetContextResponse) String() string            { return proto.CompactTextString(m) }
func (*GetContextResponse) ProtoMessage()               {}
func (*GetContextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetContextResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetContextIntoFileRequest struct {
	AllowFailed bool `protobuf:"varint,1,opt,name=allowFailed" json:"allowFailed,omitempty"`
}

func (m *GetContextIntoFileRequest) Reset()                    { *m = GetContextIntoFileRequest{} }
func (m *GetContextIntoFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContextIntoFileRequest) ProtoMessage()               {}
func (*GetContextIntoFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetContextIntoFileRequest) GetAllowFailed() bool {
	if m != nil {
		return m.AllowFailed
	}
	return false
}

type GetContextIntoFileResponse struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *GetContextIntoFileResponse) Reset()                    { *m = GetContextIntoFileResponse{} }
func (m *GetContextIntoFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetContextIntoFileResponse) ProtoMessage()               {}
func (*GetContextIntoFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetContextIntoFileResponse) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

// StoreContext
type StoreContextRequest struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *StoreContextRequest) Reset()                    { *m = StoreContextRequest{} }
func (m *StoreContextRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreContextRequest) ProtoMessage()               {}
func (*StoreContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StoreContextRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// StoreContext
type StoreContextFromFileRequest struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *StoreContextFromFileRequest) Reset()                    { *m = StoreContextFromFileRequest{} }
func (m *StoreContextFromFileRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreContextFromFileRequest) ProtoMessage()               {}
func (*StoreContextFromFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StoreContextFromFileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

// ReportError
type ReportErrorRequest struct {
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReportErrorRequest) Reset()                    { *m = ReportErrorRequest{} }
func (m *ReportErrorRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportErrorRequest) ProtoMessage()               {}
func (*ReportErrorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReportErrorRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *ReportErrorRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// ReportWarning
type ReportWarningRequest struct {
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReportWarningRequest) Reset()                    { *m = ReportWarningRequest{} }
func (m *ReportWarningRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportWarningRequest) ProtoMessage()               {}
func (*ReportWarningRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReportWarningRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *ReportWarningRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// StatsIncrement, StatsHistogram, StatsGauge
type StatsRequest struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value int64    `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Tags  []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StatsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatsRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *StatsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type LogRequest struct {
	SourceId   string `protobuf:"bytes,1,opt,name=sourceId" json:"sourceId,omitempty"`
	RunId      int64  `protobuf:"varint,2,opt,name=runId" json:"runId,omitempty"`
	Source     string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Collection string `protobuf:"bytes,4,opt,name=collection" json:"collection,omitempty"`
	Level      string `protobuf:"bytes,5,opt,name=level" json:"level,omitempty"`
	Timestamp  int64  `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Operation  string `protobuf:"bytes,7,opt,name=operation" json:"operation,omitempty"`
	Attributes string `protobuf:"bytes,8,opt,name=attributes" json:"attributes,omitempty"`
	Id         string `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Filename   string `protobuf:"bytes,10,opt,name=filename" json:"filename,omitempty"`
	Payload    string `protobuf:"bytes,11,opt,name=payload" json:"payload,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LogRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *LogRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *LogRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *LogRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *LogRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogRequest) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *LogRequest) GetAttributes() string {
	if m != nil {
		return m.Attributes
	}
	return ""
}

func (m *LogRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LogRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *LogRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type StatusResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *StatusResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func init() {
	proto.RegisterType((*TrackRequest)(nil), "domain.TrackRequest")
	proto.RegisterType((*IdentifyRequest)(nil), "domain.IdentifyRequest")
	proto.RegisterType((*GroupRequest)(nil), "domain.GroupRequest")
	proto.RegisterType((*SetRequest)(nil), "domain.SetRequest")
	proto.RegisterType((*GetContextRequest)(nil), "domain.GetContextRequest")
	proto.RegisterType((*GetContextResponse)(nil), "domain.GetContextResponse")
	proto.RegisterType((*GetContextIntoFileRequest)(nil), "domain.GetContextIntoFileRequest")
	proto.RegisterType((*GetContextIntoFileResponse)(nil), "domain.GetContextIntoFileResponse")
	proto.RegisterType((*StoreContextRequest)(nil), "domain.StoreContextRequest")
	proto.RegisterType((*StoreContextFromFileRequest)(nil), "domain.StoreContextFromFileRequest")
	proto.RegisterType((*ReportErrorRequest)(nil), "domain.ReportErrorRequest")
	proto.RegisterType((*ReportWarningRequest)(nil), "domain.ReportWarningRequest")
	proto.RegisterType((*StatsRequest)(nil), "domain.StatsRequest")
	proto.RegisterType((*LogRequest)(nil), "domain.LogRequest")
	proto.RegisterType((*StatusResponse)(nil), "domain.StatusResponse")
	proto.RegisterType((*Empty)(nil), "domain.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Source service

type SourceClient interface {
	// API Proxy
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Identify(ctx context.Context, in *IdentifyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Context
	GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*GetContextResponse, error)
	StoreContext(ctx context.Context, in *StoreContextRequest, opts ...grpc.CallOption) (*Empty, error)
	GetContextIntoFile(ctx context.Context, in *GetContextIntoFileRequest, opts ...grpc.CallOption) (*GetContextIntoFileResponse, error)
	StoreContextFromFile(ctx context.Context, in *StoreContextFromFileRequest, opts ...grpc.CallOption) (*Empty, error)
	// Reports
	ReportError(ctx context.Context, in *ReportErrorRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ReportWarning(ctx context.Context, in *ReportWarningRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Stats
	StatsIncrement(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	StatsHistogram(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	StatsGauge(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Misc.
	KeepAlive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// Source Logs
	LogSourceEntry(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type sourceClient struct {
	cc *grpc.ClientConn
}

func NewSourceClient(cc *grpc.ClientConn) SourceClient {
	return &sourceClient{cc}
}

func (c *sourceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/Track", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) Identify(ctx context.Context, in *IdentifyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/Identify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/Group", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*GetContextResponse, error) {
	out := new(GetContextResponse)
	err := grpc.Invoke(ctx, "/domain.Source/GetContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) StoreContext(ctx context.Context, in *StoreContextRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/domain.Source/StoreContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) GetContextIntoFile(ctx context.Context, in *GetContextIntoFileRequest, opts ...grpc.CallOption) (*GetContextIntoFileResponse, error) {
	out := new(GetContextIntoFileResponse)
	err := grpc.Invoke(ctx, "/domain.Source/GetContextIntoFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) StoreContextFromFile(ctx context.Context, in *StoreContextFromFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/domain.Source/StoreContextFromFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) ReportError(ctx context.Context, in *ReportErrorRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/ReportError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) ReportWarning(ctx context.Context, in *ReportWarningRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/ReportWarning", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) StatsIncrement(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/StatsIncrement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) StatsHistogram(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/StatsHistogram", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) StatsGauge(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/StatsGauge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) KeepAlive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) LogSourceEntry(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/domain.Source/LogSourceEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Source service

type SourceServer interface {
	// API Proxy
	Set(context.Context, *SetRequest) (*StatusResponse, error)
	Track(context.Context, *TrackRequest) (*StatusResponse, error)
	Identify(context.Context, *IdentifyRequest) (*StatusResponse, error)
	Group(context.Context, *GroupRequest) (*StatusResponse, error)
	// Context
	GetContext(context.Context, *GetContextRequest) (*GetContextResponse, error)
	StoreContext(context.Context, *StoreContextRequest) (*Empty, error)
	GetContextIntoFile(context.Context, *GetContextIntoFileRequest) (*GetContextIntoFileResponse, error)
	StoreContextFromFile(context.Context, *StoreContextFromFileRequest) (*Empty, error)
	// Reports
	ReportError(context.Context, *ReportErrorRequest) (*StatusResponse, error)
	ReportWarning(context.Context, *ReportWarningRequest) (*StatusResponse, error)
	// Stats
	StatsIncrement(context.Context, *StatsRequest) (*StatusResponse, error)
	StatsHistogram(context.Context, *StatsRequest) (*StatusResponse, error)
	StatsGauge(context.Context, *StatsRequest) (*StatusResponse, error)
	// Misc.
	KeepAlive(context.Context, *Empty) (*StatusResponse, error)
	// Source Logs
	LogSourceEntry(context.Context, *LogRequest) (*StatusResponse, error)
}

func RegisterSourceServer(s *grpc.Server, srv SourceServer) {
	s.RegisterService(&_Source_serviceDesc, srv)
}

func _Source_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Track(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/Identify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Identify(ctx, req.(*IdentifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/Group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Group(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/GetContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).GetContext(ctx, req.(*GetContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_StoreContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).StoreContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/StoreContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).StoreContext(ctx, req.(*StoreContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_GetContextIntoFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextIntoFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).GetContextIntoFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/GetContextIntoFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).GetContextIntoFile(ctx, req.(*GetContextIntoFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_StoreContextFromFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreContextFromFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).StoreContextFromFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/StoreContextFromFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).StoreContextFromFile(ctx, req.(*StoreContextFromFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_ReportError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).ReportError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/ReportError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).ReportError(ctx, req.(*ReportErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_ReportWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWarningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).ReportWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/ReportWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).ReportWarning(ctx, req.(*ReportWarningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_StatsIncrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).StatsIncrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/StatsIncrement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).StatsIncrement(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_StatsHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).StatsHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/StatsHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).StatsHistogram(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_StatsGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).StatsGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/StatsGauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).StatsGauge(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).KeepAlive(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_LogSourceEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).LogSourceEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Source/LogSourceEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).LogSourceEntry(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Source_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.Source",
	HandlerType: (*SourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Source_Set_Handler,
		},
		{
			MethodName: "Track",
			Handler:    _Source_Track_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _Source_Identify_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _Source_Group_Handler,
		},
		{
			MethodName: "GetContext",
			Handler:    _Source_GetContext_Handler,
		},
		{
			MethodName: "StoreContext",
			Handler:    _Source_StoreContext_Handler,
		},
		{
			MethodName: "GetContextIntoFile",
			Handler:    _Source_GetContextIntoFile_Handler,
		},
		{
			MethodName: "StoreContextFromFile",
			Handler:    _Source_StoreContextFromFile_Handler,
		},
		{
			MethodName: "ReportError",
			Handler:    _Source_ReportError_Handler,
		},
		{
			MethodName: "ReportWarning",
			Handler:    _Source_ReportWarning_Handler,
		},
		{
			MethodName: "StatsIncrement",
			Handler:    _Source_StatsIncrement_Handler,
		},
		{
			MethodName: "StatsHistogram",
			Handler:    _Source_StatsHistogram_Handler,
		},
		{
			MethodName: "StatsGauge",
			Handler:    _Source_StatsGauge_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _Source_KeepAlive_Handler,
		},
		{
			MethodName: "LogSourceEntry",
			Handler:    _Source_LogSourceEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain.proto",
}

func init() { proto.RegisterFile("domain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0xe4, 0x34,
	0x14, 0xdf, 0x69, 0x3b, 0x93, 0xce, 0xeb, 0x6c, 0x11, 0x66, 0x54, 0xb2, 0xb3, 0xab, 0x55, 0x09,
	0x97, 0x8a, 0xc3, 0x22, 0xb1, 0x20, 0x40, 0xda, 0x45, 0xa0, 0x55, 0x5b, 0x46, 0x54, 0x08, 0x65,
	0x90, 0xb8, 0xc0, 0xc1, 0x9b, 0xbc, 0x46, 0x16, 0x89, 0x1d, 0x6c, 0xa7, 0x30, 0x5f, 0x8a, 0x6f,
	0xc4, 0x95, 0x4f, 0xc0, 0x81, 0x23, 0xb2, 0x13, 0x27, 0xce, 0xcc, 0x10, 0x5a, 0x95, 0xc3, 0xde,
	0xf2, 0xfe, 0xfb, 0x3d, 0xff, 0xde, 0xcf, 0x81, 0x59, 0x2a, 0x0a, 0xca, 0xf8, 0xb3, 0x52, 0x0a,
	0x2d, 0xc8, 0xa4, 0x96, 0xa2, 0xbf, 0x47, 0x30, 0xfb, 0x5e, 0xd2, 0xe4, 0xe7, 0x18, 0x7f, 0xa9,
	0x50, 0x69, 0x12, 0x42, 0x90, 0x08, 0xae, 0xf1, 0x37, 0x1d, 0x8e, 0x4e, 0x47, 0x67, 0xb3, 0xd8,
	0x89, 0x24, 0x82, 0x19, 0xe3, 0x1a, 0x33, 0x49, 0x35, 0x13, 0x5c, 0x85, 0x7b, 0xd6, 0xdc, 0xd3,
	0x91, 0xa7, 0x00, 0xa5, 0x14, 0x25, 0x4a, 0xcd, 0x50, 0x85, 0xfb, 0xd6, 0xc3, 0xd3, 0x90, 0x53,
	0x38, 0xa2, 0x5c, 0xf0, 0x75, 0x21, 0x2a, 0xb5, 0x4c, 0xc3, 0x83, 0xd3, 0xd1, 0xd9, 0x34, 0xf6,
	0x55, 0xe4, 0x04, 0x26, 0x95, 0x42, 0xb9, 0x4c, 0xc3, 0xb1, 0x35, 0x36, 0x12, 0x99, 0xc3, 0x18,
	0x6f, 0x90, 0xeb, 0x70, 0x62, 0xd5, 0xb5, 0x40, 0x9e, 0xc0, 0xb4, 0x40, 0xa5, 0x68, 0x86, 0xcb,
	0x34, 0x0c, 0xac, 0xa5, 0x53, 0x18, 0xab, 0x66, 0x05, 0x2a, 0x4d, 0x8b, 0x32, 0x3c, 0xac, 0xad,
	0xad, 0x22, 0xfa, 0x63, 0x04, 0x6f, 0x2d, 0x53, 0xe4, 0x9a, 0x5d, 0xaf, 0xff, 0x9f, 0xee, 0x4f,
	0x60, 0xa2, 0x25, 0x65, 0xda, 0x75, 0xde, 0x48, 0xf7, 0xe8, 0xba, 0xd7, 0xdf, 0xe4, 0x6e, 0xfd,
	0xfd, 0x35, 0x82, 0xd9, 0xa5, 0x14, 0x55, 0xf9, 0xa6, 0x36, 0x17, 0x42, 0x90, 0x99, 0xf3, 0xb5,
	0xad, 0x39, 0xf1, 0x5e, 0xd7, 0xfa, 0x23, 0xc0, 0x0a, 0xb5, 0xeb, 0xf9, 0x29, 0x40, 0x22, 0xf2,
	0x1c, 0x13, 0xd3, 0x84, 0x6d, 0x7b, 0x1a, 0x7b, 0x1a, 0x72, 0x0c, 0x7b, 0x2c, 0xb5, 0xfd, 0x4e,
	0xe3, 0x3d, 0x96, 0xfe, 0x17, 0x80, 0xa3, 0x4f, 0xe0, 0xed, 0x4b, 0xd4, 0xaf, 0xea, 0xb9, 0xb9,
	0x22, 0x66, 0x04, 0x79, 0x2e, 0x7e, 0xbd, 0xa0, 0x2c, 0xc7, 0xd4, 0x56, 0x39, 0x8c, 0x7d, 0x55,
	0x74, 0x06, 0xc4, 0x0f, 0x53, 0xa5, 0xe0, 0x0a, 0x09, 0x81, 0x83, 0x94, 0x6a, 0xda, 0xdc, 0x86,
	0xfd, 0x8e, 0x5e, 0xc2, 0xa3, 0xce, 0x73, 0xc9, 0xb5, 0xb8, 0x60, 0x39, 0xde, 0xbe, 0xd0, 0x67,
	0xb0, 0xd8, 0x15, 0xde, 0x14, 0x5c, 0xc0, 0xe1, 0x35, 0xcb, 0x91, 0xd3, 0x02, 0x9b, 0x59, 0xb4,
	0x72, 0xf4, 0x21, 0xbc, 0xb3, 0xd2, 0x42, 0xe2, 0x46, 0x6f, 0x21, 0x04, 0x25, 0x5d, 0xe7, 0x82,
	0xa6, 0x0e, 0x34, 0x8d, 0x18, 0x7d, 0x0e, 0x8f, 0xfd, 0x80, 0x0b, 0x29, 0x0a, 0xff, 0xac, 0x43,
	0xb5, 0xbe, 0x05, 0x12, 0x63, 0x29, 0xa4, 0x3e, 0x97, 0x52, 0xc8, 0xdb, 0xde, 0x55, 0x08, 0x41,
	0x03, 0x02, 0x7b, 0x31, 0xd3, 0xd8, 0x89, 0xd1, 0x77, 0x30, 0xaf, 0xf3, 0xfd, 0x40, 0x25, 0x67,
	0x3c, 0xbb, 0x7f, 0xc6, 0x2b, 0x98, 0xad, 0x34, 0xd5, 0xca, 0x65, 0x22, 0x70, 0xe0, 0x75, 0x62,
	0xbf, 0x0d, 0x25, 0xdd, 0xd0, 0xbc, 0x42, 0x0b, 0x9f, 0xfd, 0xb8, 0x16, 0x8c, 0xa7, 0xa6, 0x99,
	0xc1, 0xce, 0xbe, 0xf1, 0x34, 0xdf, 0xd1, 0xef, 0x7b, 0x00, 0x57, 0x22, 0xf3, 0x46, 0xa3, 0x44,
	0x25, 0x13, 0x83, 0xee, 0x66, 0x34, 0x4e, 0x36, 0x49, 0x65, 0xc5, 0x97, 0xa9, 0x4b, 0x6a, 0x05,
	0xb3, 0x42, 0xb5, 0x47, 0x73, 0xce, 0x46, 0xda, 0x68, 0xf0, 0x60, 0xab, 0xc1, 0x39, 0x8c, 0x73,
	0xbc, 0xc1, 0xbc, 0xd9, 0xbc, 0x5a, 0xe8, 0x2f, 0xd0, 0xc4, 0xd6, 0xe9, 0x14, 0xc6, 0x6a, 0xe0,
	0x6e, 0xd7, 0xde, 0x2d, 0x5f, 0xab, 0x30, 0x15, 0xa9, 0xd6, 0x92, 0xbd, 0xae, 0x34, 0xaa, 0x66,
	0xfb, 0x3c, 0x4d, 0xb3, 0x50, 0xd3, 0x76, 0xa1, 0x7c, 0x18, 0x40, 0x1f, 0x06, 0x3e, 0xb6, 0x8e,
	0xea, 0xf1, 0x3b, 0x6c, 0x7d, 0x00, 0xc7, 0x66, 0xfc, 0x95, 0x6a, 0xa1, 0x1b, 0x42, 0xa0, 0xaa,
	0x24, 0x41, 0xa5, 0x1a, 0xd8, 0x3b, 0x31, 0x0a, 0x60, 0x7c, 0x5e, 0x94, 0x7a, 0xfd, 0xd1, 0x9f,
	0x01, 0x4c, 0x56, 0xf5, 0x5c, 0x9e, 0xc3, 0xfe, 0x0a, 0x35, 0x21, 0xcf, 0x9a, 0x47, 0xaf, 0x63,
	0x84, 0xc5, 0x49, 0xab, 0xeb, 0x15, 0x88, 0x1e, 0x90, 0x4f, 0x61, 0x6c, 0x9f, 0x42, 0x32, 0x77,
	0x2e, 0xfe, 0xcb, 0x38, 0x10, 0xf8, 0x12, 0x0e, 0xdd, 0x43, 0x42, 0xde, 0x75, 0x5e, 0x1b, 0x4f,
	0xcb, 0x70, 0x5d, 0xcb, 0xd3, 0x5d, 0x5d, 0x9f, 0xb6, 0x07, 0x02, 0xcf, 0x01, 0xba, 0x65, 0x27,
	0x8f, 0xda, 0xe8, 0x4d, 0x82, 0x5a, 0x2c, 0x76, 0x99, 0xda, 0x34, 0x2f, 0x0c, 0xd6, 0xbb, 0x45,
	0x26, 0x8f, 0xbb, 0x82, 0x5b, 0x7c, 0xb0, 0x78, 0xe8, 0x8c, 0x76, 0xe6, 0xd1, 0x03, 0xf2, 0x93,
	0x4f, 0x6d, 0x8e, 0x71, 0xc8, 0x7b, 0xdb, 0x15, 0x37, 0xc8, 0x6c, 0x11, 0x0d, 0xb9, 0xb4, 0x87,
	0xbb, 0x82, 0xf9, 0x2e, 0x96, 0x21, 0xef, 0xef, 0x3a, 0xe4, 0x06, 0x07, 0x6d, 0x1f, 0xf6, 0x15,
	0x1c, 0x79, 0xc4, 0x43, 0xda, 0xb9, 0x6c, 0xb3, 0xd1, 0xc0, 0xd8, 0x2f, 0xe1, 0x61, 0x8f, 0x6d,
	0xc8, 0x93, 0x7e, 0x9a, 0x3e, 0x09, 0x0d, 0x24, 0xfa, 0xb2, 0x46, 0xb9, 0x5a, 0xf2, 0x44, 0x62,
	0x61, 0xfe, 0x67, 0xe6, 0xbe, 0xaf, 0xba, 0x7d, 0x86, 0xaf, 0x99, 0xd2, 0x22, 0x93, 0xb4, 0xb8,
	0x73, 0x86, 0x17, 0x00, 0xd6, 0xf3, 0x92, 0x56, 0x19, 0xde, 0x39, 0xfa, 0x63, 0x98, 0x7e, 0x83,
	0x58, 0x7e, 0x95, 0xb3, 0x1b, 0x24, 0xfd, 0x69, 0x0f, 0x44, 0x7d, 0x01, 0xc7, 0x57, 0x22, 0xab,
	0x57, 0xf5, 0x9c, 0x6b, 0xb9, 0xee, 0x16, 0xb5, 0x63, 0xc9, 0x7f, 0x8f, 0x7f, 0x3d, 0xb1, 0xff,
	0xb0, 0xcf, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x36, 0xb0, 0x41, 0xe8, 0xd3, 0x0a, 0x00, 0x00,
}
