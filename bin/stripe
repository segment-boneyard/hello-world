#!/usr/bin/env node
'use strict';

/*
 * Module dependencies.
 */

const Promise = require('bluebird');
const client = require('@segment/source');
const resources = require('../lib/resources');
const service = require('../lib/utils/kit');
const http = require('../lib/utils/http');

const config = service.config;
const log = service.log;

// pull from stripe
function pull() {
  const tasks = Object.keys(resources)
    .map((key) => resources[key])
    // top-level resources
    .filter((resource) => resource._url)
    // --resources='x,y,z' filter
    .filter((resource) => {
      if (Array.isArray(config.resources)) {
        return config.resources.indexOf(resource._collection) > -1;
      }
      return resource;
    })
    .map(function(resource) {
      if (config.stripeVersion) {
        resource.headers({ 'Stripe-Version': config.stripeVersion });
      }
      return resource;
    })
    .map((resource) => http.fetch(resource));

  return Promise.all(tasks);
}

function onError(err) {
  log.fatal(err, 'an error has caused this application to crash');
  if (err.showToUser) {
    client.reportError(err.message).then(() => process.exit(0));
  } else {
    process.exit(1);
  }
}

// global error logger
process.on('uncaughtException', onError);
process.on('unhandledRejection', onError);

// patch ssl library to use system ca bundle (required to work with shifu)
// start the program
client.useSystemCaBundle().then(pull);
